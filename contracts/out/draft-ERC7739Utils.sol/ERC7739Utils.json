{"abi":[],"bytecode":{"object":"0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220d92c62a1d9c16f3e1520db0c3d5803e5a28d843f5af7ef57af694a6c001e05e064736f6c63430008180033","sourceMap":"1388:8067:231:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x5f80fdfea2646970667358221220d92c62a1d9c16f3e1520db0c3d5803e5a28d843f5af7ef57af694a6c001e05e064736f6c63430008180033","sourceMap":"1388:8067:231:-:0;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Utilities to process https://ercs.ethereum.org/ERCS/erc-7739[ERC-7739] typed data signatures that are specific to an EIP-712 domain. This library provides methods to wrap, unwrap and operate over typed data signatures with a defensive rehashing mechanism that includes the app's xref:api:utils/cryptography#EIP712-_domainSeparatorV4[EIP-712] and preserves readability of the signed content using an EIP-712 nested approach. A smart contract domain can validate a signature for a typed data structure in two ways: - As an application validating a typed data signature. See {typedDataSignStructHash}. - As a smart contract validating a raw message signature. See {personalSignStructHash}. NOTE: A provider for a smart contract wallet would need to return this signature as the result of a call to `personal_sign` or `eth_signTypedData`, and this may be unsupported by API clients that expect a return value of 129 bytes, or specifically the `r,s,v` parameters of an xref:api:utils/cryptography#ECDSA[ECDSA] signature, as is for example specified for xref:api:utils/cryptography#EIP712[EIP-712].\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"PERSONAL_SIGN_TYPEHASH\":{\"details\":\"An EIP-712 type to represent \\\"personal\\\" signatures (i.e. mimic of `personal_sign` for smart contracts).\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/cryptography/draft-ERC7739Utils.sol\":\"ERC7739Utils\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Calldata.sol\":{\"keccak256\":\"0xa557256a5cc28f1ff8abfdb082739dc847390c6d892f563fc071994a058f9a31\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ffd71e93eb6fae111e6bfa39303c9e09b7db7bc698170f5be627d1beb40f5462\",\"dweb:/ipfs/QmXZmiy9FB1GRH2eWZLefaosFvSVGCBg3iVoZvWbptC3f6\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/draft-ERC7739Utils.sol\":{\"keccak256\":\"0xf2c0cf56f038cebfea0ead3c8d44477c98a807dd1c1f0eeee7faf620b8d9498f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2e8c38d42c96370eb3b9667e90c854fa9fc7f53f8b82bc6b8432e55aec9d2f5\",\"dweb:/ipfs/QmYWNZE7TFcVYTbGMGGdgxWsEZZQ3q3EExCiuPqsS1U5NS\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/openzeppelin-contracts/contracts/utils/cryptography/draft-ERC7739Utils.sol":"ERC7739Utils"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"lib/openzeppelin-contracts/contracts/utils/Calldata.sol":{"keccak256":"0xa557256a5cc28f1ff8abfdb082739dc847390c6d892f563fc071994a058f9a31","urls":["bzz-raw://ffd71e93eb6fae111e6bfa39303c9e09b7db7bc698170f5be627d1beb40f5462","dweb:/ipfs/QmXZmiy9FB1GRH2eWZLefaosFvSVGCBg3iVoZvWbptC3f6"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol":{"keccak256":"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269","urls":["bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11","dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/draft-ERC7739Utils.sol":{"keccak256":"0xf2c0cf56f038cebfea0ead3c8d44477c98a807dd1c1f0eeee7faf620b8d9498f","urls":["bzz-raw://a2e8c38d42c96370eb3b9667e90c854fa9fc7f53f8b82bc6b8432e55aec9d2f5","dweb:/ipfs/QmYWNZE7TFcVYTbGMGGdgxWsEZZQ3q3EExCiuPqsS1U5NS"],"license":"MIT"}},"version":1},"id":231}