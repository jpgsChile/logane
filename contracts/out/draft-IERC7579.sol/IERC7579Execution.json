{"abi":[{"type":"function","name":"execute","inputs":[{"name":"mode","type":"bytes32","internalType":"bytes32"},{"name":"executionCalldata","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"executeFromExecutor","inputs":[{"name":"mode","type":"bytes32","internalType":"bytes32"},{"name":"executionCalldata","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"returnData","type":"bytes[]","internalType":"bytes[]"}],"stateMutability":"payable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"execute(bytes32,bytes)":"e9ae5c53","executeFromExecutor(bytes32,bytes)":"d691c964"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"mode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"executionCalldata\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"mode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"executionCalldata\",\"type\":\"bytes\"}],\"name\":\"executeFromExecutor\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC-7579 Execution. Accounts should implement this interface so that the Entrypoint and ERC-7579 modules can execute operations.\",\"kind\":\"dev\",\"methods\":{\"execute(bytes32,bytes)\":{\"details\":\"Executes a transaction on behalf of the account.\",\"params\":{\"executionCalldata\":\"The encoded execution call data MUST ensure adequate authorization control: e.g. onlyEntryPointOrSelf if used with ERC-4337 If a mode is requested that is not supported by the Account, it MUST revert\",\"mode\":\"The encoded execution mode of the transaction. See ModeLib.sol for details\"}},\"executeFromExecutor(bytes32,bytes)\":{\"details\":\"Executes a transaction on behalf of the account.         This function is intended to be called by Executor Modules\",\"params\":{\"executionCalldata\":\"The encoded execution call data\",\"mode\":\"The encoded execution mode of the transaction. See ModeLib.sol for details\"},\"returns\":{\"returnData\":\"An array with the returned data of each executed subcall MUST ensure adequate authorization control: i.e. onlyExecutorModule If a mode is requested that is not supported by the Account, it MUST revert\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC7579.sol\":\"IERC7579Execution\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC4337.sol\":{\"keccak256\":\"0xc4c1b33f7f7ee592aa2ff5e7a184c400a9f9a34eeb501681cffe97e0faf0583d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed7189e2a50eba8c8b9d5505659fe8d2c136a6ce8b99486f2711925a1fc0068c\",\"dweb:/ipfs/QmaU747ZrNDaPW2UPsDLfmZU5Es6BqyPiB3Sfvi3pa4ZEr\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC7579.sol\":{\"keccak256\":\"0x69803ec9d426febc1723a2ceb11943a035ee0ef6b3483d16a6d27e300292eb4d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://348c1effc388b8a994df6e6382a72639da94cdb621448c0a8cbd96cbb89de283\",\"dweb:/ipfs/QmZDFdLegojTdKRopzLBSgnoxwVFjMLVkdVnXLARGmJ2Gu\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"mode","type":"bytes32"},{"internalType":"bytes","name":"executionCalldata","type":"bytes"}],"stateMutability":"payable","type":"function","name":"execute"},{"inputs":[{"internalType":"bytes32","name":"mode","type":"bytes32"},{"internalType":"bytes","name":"executionCalldata","type":"bytes"}],"stateMutability":"payable","type":"function","name":"executeFromExecutor","outputs":[{"internalType":"bytes[]","name":"returnData","type":"bytes[]"}]}],"devdoc":{"kind":"dev","methods":{"execute(bytes32,bytes)":{"details":"Executes a transaction on behalf of the account.","params":{"executionCalldata":"The encoded execution call data MUST ensure adequate authorization control: e.g. onlyEntryPointOrSelf if used with ERC-4337 If a mode is requested that is not supported by the Account, it MUST revert","mode":"The encoded execution mode of the transaction. See ModeLib.sol for details"}},"executeFromExecutor(bytes32,bytes)":{"details":"Executes a transaction on behalf of the account.         This function is intended to be called by Executor Modules","params":{"executionCalldata":"The encoded execution call data","mode":"The encoded execution mode of the transaction. See ModeLib.sol for details"},"returns":{"returnData":"An array with the returned data of each executed subcall MUST ensure adequate authorization control: i.e. onlyExecutorModule If a mode is requested that is not supported by the Account, it MUST revert"}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC7579.sol":"IERC7579Execution"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC4337.sol":{"keccak256":"0xc4c1b33f7f7ee592aa2ff5e7a184c400a9f9a34eeb501681cffe97e0faf0583d","urls":["bzz-raw://ed7189e2a50eba8c8b9d5505659fe8d2c136a6ce8b99486f2711925a1fc0068c","dweb:/ipfs/QmaU747ZrNDaPW2UPsDLfmZU5Es6BqyPiB3Sfvi3pa4ZEr"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC7579.sol":{"keccak256":"0x69803ec9d426febc1723a2ceb11943a035ee0ef6b3483d16a6d27e300292eb4d","urls":["bzz-raw://348c1effc388b8a994df6e6382a72639da94cdb621448c0a8cbd96cbb89de283","dweb:/ipfs/QmZDFdLegojTdKRopzLBSgnoxwVFjMLVkdVnXLARGmJ2Gu"],"license":"MIT"}},"version":1},"id":130}