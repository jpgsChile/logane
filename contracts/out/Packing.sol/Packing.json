{"abi":[{"type":"error","name":"OutOfRangeAccess","inputs":[]}],"bytecode":{"object":"0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220d319d86fccfc35442a63967fedb8ed2b65e62012324b748055a8da838fe927ca64736f6c63430008180033","sourceMap":"1103:63768:211:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x5f80fdfea2646970667358221220d319d86fccfc35442a63967fedb8ed2b65e62012324b748055a8da838fe927ca64736f6c63430008180033","sourceMap":"1103:63768:211:-:0;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OutOfRangeAccess\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Helper library packing and unpacking multiple values into bytesXX. Example usage: ```solidity library MyPacker {     type MyType is bytes32;     function _pack(address account, bytes4 selector, uint64 period) external pure returns (MyType) {         bytes12 subpack = Packing.pack_4_8(selector, bytes8(period));         bytes32 pack = Packing.pack_20_12(bytes20(account), subpack);         return MyType.wrap(pack);     }     function _unpack(MyType self) external pure returns (address, bytes4, uint64) {         bytes32 pack = MyType.unwrap(self);         return (             address(Packing.extract_32_20(pack, 0)),             Packing.extract_32_4(pack, 20),             uint64(Packing.extract_32_8(pack, 24))         );     } } ``` _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Packing.sol\":\"Packing\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Packing.sol\":{\"keccak256\":\"0xea9f5d3cdd11b7af7d8662a5c0e952f3666145cb4c9fe1452bd15c30abc462dd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8fcae95be7077d103530c4e6a5f1248aa64102dad62d642e2530316ab002e02c\",\"dweb:/ipfs/QmWCr2qicfaqsTbpgq7CJhedUHcPQv34k8HNs4f5kGjVnw\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"OutOfRangeAccess"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/openzeppelin-contracts/contracts/utils/Packing.sol":"Packing"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"lib/openzeppelin-contracts/contracts/utils/Packing.sol":{"keccak256":"0xea9f5d3cdd11b7af7d8662a5c0e952f3666145cb4c9fe1452bd15c30abc462dd","urls":["bzz-raw://8fcae95be7077d103530c4e6a5f1248aa64102dad62d642e2530316ab002e02c","dweb:/ipfs/QmWCr2qicfaqsTbpgq7CJhedUHcPQv34k8HNs4f5kGjVnw"],"license":"MIT"}},"version":1},"id":211}