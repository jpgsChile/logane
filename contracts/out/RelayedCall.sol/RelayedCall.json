{"abi":[],"bytecode":{"object":"0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220e9969be893ff918d3622e43f701c4919a03db93b584559e34ac542daae6609b964736f6c63430008180033","sourceMap":"939:5566:216:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x5f80fdfea2646970667358221220e9969be893ff918d3622e43f701c4919a03db93b584559e34ac542daae6609b964736f6c63430008180033","sourceMap":"939:5566:216:-:0;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for performing external calls through dynamically deployed relay contracts that hide the original caller's address from the target contract. This pattern is used in ERC-4337's EntryPoint for account factory calls and ERC-6942 for safe factory interactions. When privileged contracts need to make arbitrary external calls based on user input, calling the target directly can be risky because the target sees the privileged contract as `msg.sender` and could exploit this trust relationship. This library solves this by deploying minimal relay contracts that act as intermediaries, ensuring the target only sees the unprivileged relay address as `msg.sender`. For example, instead of `target.call(data)` where the target sees this contract as `msg.sender`, use {relayCall} where the target sees a relay address as `msg.sender`.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/RelayedCall.sol\":\"RelayedCall\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/RelayedCall.sol\":{\"keccak256\":\"0x5f15c3bb113fe3990948ac25a09abb79eb147de922cadec02bcb7e1fbec20cb1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a24b8b8b2e144951173e827b45444f129b7e85efdc4a9adf2825b9388793591\",\"dweb:/ipfs/QmUnZUsViyv5YkAJKog4Vf1SX1QcavbPmDmVRF85DTcZGN\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/openzeppelin-contracts/contracts/utils/RelayedCall.sol":"RelayedCall"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"lib/openzeppelin-contracts/contracts/utils/RelayedCall.sol":{"keccak256":"0x5f15c3bb113fe3990948ac25a09abb79eb147de922cadec02bcb7e1fbec20cb1","urls":["bzz-raw://7a24b8b8b2e144951173e827b45444f129b7e85efdc4a9adf2825b9388793591","dweb:/ipfs/QmUnZUsViyv5YkAJKog4Vf1SX1QcavbPmDmVRF85DTcZGN"],"license":"MIT"}},"version":1},"id":216}