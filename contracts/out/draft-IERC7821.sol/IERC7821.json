{"abi":[{"type":"function","name":"execute","inputs":[{"name":"mode","type":"bytes32","internalType":"bytes32"},{"name":"executionData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"supportsExecutionMode","inputs":[{"name":"mode","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"execute(bytes32,bytes)":"e9ae5c53","supportsExecutionMode(bytes32)":"d03c7914"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"mode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"executionData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"mode\",\"type\":\"bytes32\"}],\"name\":\"supportsExecutionMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for minimal batch executor.\",\"kind\":\"dev\",\"methods\":{\"execute(bytes32,bytes)\":{\"details\":\"Executes the calls in `executionData`. Reverts and bubbles up error if any call fails. `executionData` encoding: - If `opData` is empty, `executionData` is simply `abi.encode(calls)`. - Else, `executionData` is `abi.encode(calls, opData)`.   See: https://eips.ethereum.org/EIPS/eip-7579 Supported modes: - `bytes32(0x01000000000000000000...)`: does not support optional `opData`. - `bytes32(0x01000000000078210001...)`: supports optional `opData`. Authorization checks: - If `opData` is empty, the implementation SHOULD require that   `msg.sender == address(this)`. - If `opData` is not empty, the implementation SHOULD use the signature   encoded in `opData` to determine if the caller can perform the execution. `opData` may be used to store additional data for authentication, paymaster data, gas limits, etc. For calldata compression efficiency, if a Call.to is `address(0)`, it will be replaced with `address(this)`.\"},\"supportsExecutionMode(bytes32)\":{\"details\":\"This function is provided for frontends to detect support. Only returns true for: - `bytes32(0x01000000000000000000...)`: does not support optional `opData`. - `bytes32(0x01000000000078210001...)`: supports optional `opData`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC7821.sol\":\"IERC7821\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC7821.sol\":{\"keccak256\":\"0xcb3a15c9cac66eaac61b4f5e8ae73c3e7761d873a4ad836b2b5c8c7ccf59a22a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d45e4943d42ee208567974e9aaf30dd046420057cd05c1f3fb0da3ed951eda9\",\"dweb:/ipfs/QmUiMJzfp1q8JX4tcAiPeyNvUFh7NMwhMouu4KthWuAEDF\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"mode","type":"bytes32"},{"internalType":"bytes","name":"executionData","type":"bytes"}],"stateMutability":"payable","type":"function","name":"execute"},{"inputs":[{"internalType":"bytes32","name":"mode","type":"bytes32"}],"stateMutability":"view","type":"function","name":"supportsExecutionMode","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"execute(bytes32,bytes)":{"details":"Executes the calls in `executionData`. Reverts and bubbles up error if any call fails. `executionData` encoding: - If `opData` is empty, `executionData` is simply `abi.encode(calls)`. - Else, `executionData` is `abi.encode(calls, opData)`.   See: https://eips.ethereum.org/EIPS/eip-7579 Supported modes: - `bytes32(0x01000000000000000000...)`: does not support optional `opData`. - `bytes32(0x01000000000078210001...)`: supports optional `opData`. Authorization checks: - If `opData` is empty, the implementation SHOULD require that   `msg.sender == address(this)`. - If `opData` is not empty, the implementation SHOULD use the signature   encoded in `opData` to determine if the caller can perform the execution. `opData` may be used to store additional data for authentication, paymaster data, gas limits, etc. For calldata compression efficiency, if a Call.to is `address(0)`, it will be replaced with `address(this)`."},"supportsExecutionMode(bytes32)":{"details":"This function is provided for frontends to detect support. Only returns true for: - `bytes32(0x01000000000000000000...)`: does not support optional `opData`. - `bytes32(0x01000000000078210001...)`: supports optional `opData`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC7821.sol":"IERC7821"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC7821.sol":{"keccak256":"0xcb3a15c9cac66eaac61b4f5e8ae73c3e7761d873a4ad836b2b5c8c7ccf59a22a","urls":["bzz-raw://2d45e4943d42ee208567974e9aaf30dd046420057cd05c1f3fb0da3ed951eda9","dweb:/ipfs/QmUiMJzfp1q8JX4tcAiPeyNvUFh7NMwhMouu4KthWuAEDF"],"license":"MIT"}},"version":1},"id":134}